(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{450:function(t,r,e){t.exports=e.p+"assets/img/image-20210718125925460.9f66b630.png"},451:function(t,r,e){t.exports=e.p+"assets/img/Implementing_Domain_Driven_Design.550ffb43.jpg"},502:function(t,r,e){"use strict";e.r(r);var n=e(2),a=Object(n.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("本系列文章，翻译至"),r("a",{attrs:{href:"https://abp.io/books/implementing-domain-driven-design",target:"_blank",rel:"noopener noreferrer"}},[t._v("Implementing Domain Driven Design"),r("OutboundLink")],1)]),t._v(" "),r("h1",{attrs:{id:"领域驱动设计是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#领域驱动设计是什么"}},[t._v("#")]),t._v(" 领域驱动设计是什么")]),t._v(" "),r("p",[t._v("领域驱动设计 (DDD) 是一种通过将实现连接到"),r("strong",[t._v("不断发展的")]),t._v("模型来满足"),r("strong",[t._v("复杂")]),t._v("需求的软件开发方法；")]),t._v(" "),r("p",[t._v("DDD 适用于"),r("strong",[t._v("复杂领域")]),t._v("和"),r("strong",[t._v("大型")]),t._v("应用，而不是简单的 CRUD 应用。它侧重于"),r("strong",[t._v("核心领域逻辑")]),t._v("而不是基础架构细节。它有助于构建"),r("strong",[t._v("灵活")]),t._v("、模块化和"),r("strong",[t._v("可维护")]),t._v("的代码库。")]),t._v(" "),r("h2",{attrs:{id:"oop-和-solid"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oop-和-solid"}},[t._v("#")]),t._v(" OOP 和 SOLID")]),t._v(" "),r("p",[t._v("实现 DDD 高度依赖于面向对象编程 (OOP) 和 "),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/SOLID",target:"_blank",rel:"noopener noreferrer"}},[t._v("SOLID"),r("OutboundLink")],1),t._v(" 原则。实际上，它"),r("strong",[t._v("实现")]),t._v("并"),r("strong",[t._v("扩展")]),t._v("了这些原则。因此，在真正实现 DDD 的同时，对 OOP 和 SOLID 的"),r("strong",[t._v("良好理解")]),t._v("对您有很大帮助。")]),t._v(" "),r("h2",{attrs:{id:"ddd分层-和-整洁架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ddd分层-和-整洁架构"}},[t._v("#")]),t._v(" DDD分层 和 整洁架构")]),t._v(" "),r("p",[t._v("基于领域驱动的解决方案有四个基本层；")]),t._v(" "),r("p",[r("img",{attrs:{src:e(450),alt:"image-20210718125925460"}})]),t._v(" "),r("p",[t._v("业务逻辑分为领域层和应用层两层，包含不同种类的业务逻辑；")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("领域层")]),t._v("实现了领域/系统的核心、用例独立的业务逻辑。")]),t._v(" "),r("li",[r("strong",[t._v("应用层")]),t._v("基于领域实现应用的用例。用例可以被认为是用户界面 (UI) 上的用户交互。")]),t._v(" "),r("li",[r("strong",[t._v("表示层")]),t._v("包含应用程序的 UI 元素（页面、组件）。")]),t._v(" "),r("li",[r("strong",[t._v("基础设施层")]),t._v("通过实现对第三方库和系统的抽象和集成来支持其他层。")])]),t._v(" "),r("p",[t._v("相同的分层可以如下图所示，称为 "),r("a",{attrs:{href:"https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clean Architecture"),r("OutboundLink")],1),t._v("，有时也称为"),r("a",{attrs:{href:"https://jeffreypalermo.com/blog/the-onion-architecture-part-1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Onion Architecture"),r("OutboundLink")],1),t._v("：")]),t._v(" "),r("p",[r("img",{attrs:{src:e(451),alt:"Implementing_Domain_Driven_Design"}})]),t._v(" "),r("p",[t._v("在 Clean Architecture 中，每一层仅"),r("strong",[t._v("依赖于直接位于其内部的层")]),t._v("。最独立的层显示在最里面的圆圈中，它是领域层。")]),t._v(" "),r("h2",{attrs:{id:"核心构建块"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核心构建块"}},[t._v("#")]),t._v(" 核心构建块")]),t._v(" "),r("p",[t._v("DDD 主要"),r("strong",[t._v("关注领域和应用层")]),t._v("，而忽略了表示和基础设施。它们被视为细节，业务层不应依赖于它们。")]),t._v(" "),r("p",[t._v("这并不意味着表示层和基础设施层不重要。它们非常重要。 UI 框架和数据库提供程序有自己的规则和最佳实践，您需要了解和应用这些规则和最佳实践。但是，这些不在 DDD 的主题中。")]),t._v(" "),r("p",[t._v("本节介绍领域和应用层的基本构建块。")]),t._v(" "),r("h3",{attrs:{id:"领域层构建块"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#领域层构建块"}},[t._v("#")]),t._v(" 领域层构建块")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("实体：")]),r("a",{attrs:{href:"https://docs.abp.io/en/abp/latest/Entities",target:"_blank",rel:"noopener noreferrer"}},[t._v("实体"),r("OutboundLink")],1),t._v("是一个对象，具有自己的属性（状态、数据）和实现在这些属性上执行的业务逻辑的方法。实体由其唯一标识符 (Id) 表示。具有不同 Id 的两个实体对象被视为不同的实体。")]),t._v(" "),r("li",[r("strong",[t._v("值对象：")]),r("a",{attrs:{href:"https://docs.abp.io/en/abp/latest/Value-Objects",target:"_blank",rel:"noopener noreferrer"}},[t._v("值对象"),r("OutboundLink")],1),t._v("是另一种由其属性而非唯一 ID 标识的域对象。这意味着具有相同属性的两个值对象被视为同一个对象。值对象通常被实现为不可变的，并且通常比实体简单得多。")]),t._v(" "),r("li",[r("strong",[t._v("聚合和聚合根：")]),r("a",{attrs:{href:"https://docs.abp.io/en/abp/latest/Entities",target:"_blank",rel:"noopener noreferrer"}},[t._v("聚合"),r("OutboundLink")],1),t._v("是由聚合根对象绑定在一起的一组对象（实体和值对象）。"),r("strong",[t._v("聚合根")]),t._v("是具有一些附加职责的特定类型的实体。")]),t._v(" "),r("li",[r("strong",[t._v("存储库（接口）：")]),r("a",{attrs:{href:"https://docs.abp.io/en/abp/latest/Repositories",target:"_blank",rel:"noopener noreferrer"}},[t._v("存储库"),r("OutboundLink")],1),t._v("是一个类似集合的接口，领域和应用层使用它来访问数据持久性系统（数据库）。它对业务代码隐藏了 DBMS 的复杂性。领域层包含存储库的"),r("strong",[t._v("接口")]),t._v("。")]),t._v(" "),r("li",[r("strong",[t._v("领域服务：")]),r("a",{attrs:{href:"https://docs.abp.io/en/abp/latest/Domain-Services",target:"_blank",rel:"noopener noreferrer"}},[t._v("领域服务"),r("OutboundLink")],1),t._v("是实现领域核心业务规则的无状态服务。实现依赖于多个聚合（实体）类型或一些外部服务的领域逻辑很有用。")]),t._v(" "),r("li",[r("strong",[t._v("规约：")]),r("a",{attrs:{href:"https://docs.abp.io/en/abp/latest/Specifications",target:"_blank",rel:"noopener noreferrer"}},[t._v("规约"),r("OutboundLink")],1),t._v("用于为实体和其他业务对象定义命名的、可重用的和可组合的过滤器。")]),t._v(" "),r("li",[r("strong",[t._v("领域事件：")]),r("a",{attrs:{href:"https://docs.abp.io/en/abp/latest/Event-Bus",target:"_blank",rel:"noopener noreferrer"}},[t._v("领域事件"),r("OutboundLink")],1),t._v("是一种在特定领域事件发生时以松散耦合的方式通知其他服务的方式。")])]),t._v(" "),r("h3",{attrs:{id:"应用层构建块"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用层构建块"}},[t._v("#")]),t._v(" 应用层构建块")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("应用服务：")]),r("a",{attrs:{href:"https://docs.abp.io/en/abp/latest/Application-Services",target:"_blank",rel:"noopener noreferrer"}},[t._v("应用服务"),r("OutboundLink")],1),t._v("是实现应用用例的无状态服务。应用程序服务通常获取并返回 DTO。它由表示层使用。它使用和协调域对象来实现用例。用例通常被视为一个工作单元。")]),t._v(" "),r("li",[r("strong",[t._v("数据传输对象 (DTO)：")]),r("a",{attrs:{href:"https://docs.abp.io/en/abp/latest/Data-Transfer-Objects",target:"_blank",rel:"noopener noreferrer"}},[t._v("DTO"),r("OutboundLink")],1),t._v(" 是一个简单的对象，没有任何业务逻辑，用于在应用程序层和表示层之间传输状态（数据）。")]),t._v(" "),r("li",[r("strong",[t._v("工作单元 (UOW)：")]),r("a",{attrs:{href:"https://docs.abp.io/en/abp/latest/Unit-Of-Work",target:"_blank",rel:"noopener noreferrer"}},[t._v("工作单元"),r("OutboundLink")],1),t._v("是原子性工作，应该作为事务单元来完成。 UOW 中的所有操作都应该在成功时一起提交或在任何一个失败时一起回滚。")])]),t._v(" "),r("div",{staticClass:"custom-block warning"},[r("p",{staticClass:"title"}),r("p",[t._v("作者：Gerry Ge")]),t._v(" "),r("p",[t._v("出处："),r("a",{attrs:{href:"https://gerryge.com/blogs/2021/Implementing_Domain_Driven_Design/02_What_Is_DDD.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("实现领域驱动设计-DDD是什么"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("版权：本作品采用「"),r("a",{attrs:{href:"https://creativecommons.org/licenses/by-nc-sa/4.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("署名-非商业性使用-相同方式共享 4.0 国际"),r("OutboundLink")],1),t._v("」许可协议进行许可。")]),t._v(" "),r("p",[r("strong",[t._v("转载请注明出处")])])])])}),[],!1,null,null,null);r.default=a.exports}}]);